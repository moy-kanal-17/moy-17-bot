import aiogram
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
import asyncio
import aiohttp
from g4f.client import Client  # GPT4Free kutubxonasi

TOKEN = '7838778700:AAE7HIfFvQUmx3ngdAvr6r-RrftM-D1OAC4'
ADMIN_ID = 5655572400
API_KEY = "0fd92f48fd3fbe6479333eeffdc1543c"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
gpt_client = Client()

async def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                return None

async def get_weather_gpt(city):
    try:
        prompt = f"–ö–∞–∫–æ–≤–∞ –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å?"
        response = gpt_client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
        return response.choices[0].message.content if response.choices else None
    except Exception:
        return None

@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üé¨ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–±–æ—Ä–∞ –≤ —Ñ–∏–ª—å–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ!\n"
                         "‚òÅÔ∏è –¢–∞–∫–∂–µ —è –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                         "`/weather [–≥–æ—Ä–æ–¥]` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥]`.", 
                         parse_mode="Markdown")

@router.message(Command("weather"))
async def weather_command(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: `/weather Tashkent`", parse_mode="Markdown")
        return

    city = args[1]
    data = await get_weather(city)
    
    if data and "main" in data:
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"].capitalize()
        await message.answer(f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅÔ∏è {desc}")
    else:
        gpt_weather = await get_weather_gpt(city)
        if gpt_weather:
            await message.answer(f"ü§ñ –ü–æ –¥–∞–Ω–Ω—ã–º AI:\n{gpt_weather}")
        else:
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø–æ–≥–æ–¥–æ–π!\n–ì–æ—Ä–æ–¥: {city}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} ({message.from_user.id})")

@router.message(lambda message: message.text.lower().startswith("–ø–æ–≥–æ–¥–∞"))
async def weather_text(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ `–ø–æ–≥–æ–¥–∞`. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ø–æ–≥–æ–¥–∞ –¢–∞—à–∫–µ–Ω—Ç`")
        return

    city = args[1]
    data = await get_weather(city)
    
    if data and "main" in data:
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"].capitalize()
        await message.answer(f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅÔ∏è {desc}")
    else:
        gpt_weather = await get_weather_gpt(city)
        if gpt_weather:
            await message.answer(f"ü§ñ –ü–æ –¥–∞–Ω–Ω—ã–º AI:\n{gpt_weather}")
        else:
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø–æ–≥–æ–¥–æ–π!\n–ì–æ—Ä–æ–¥: {city}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} ({message.from_user.id})")

@router.message(lambda message: message.text is not None)
async def handle_text(message: types.Message):
    user_info = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\nüë§ {message.from_user.full_name}\nüÜî ID: {message.from_user.id}"
    if message.from_user.username:
        user_info += f"\nüîó Username: @{message.from_user.username}"
    user_info += f"\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"

    await bot.send_message(ADMIN_ID, user_info)

@router.message(lambda message: message.photo is not None)
async def handle_photo(message: types.Message):
    photo = message.photo[-1].file_id
    caption = f"üñº –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ!\nüë§ –ò–º—è: {message.from_user.full_name}\nüÜî ID: {message.from_user.id}"
    if message.from_user.username:
        caption += f"\nüîó Username: @{message.from_user.username}"
    if message.caption:
        caption += f"\n‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {message.caption}"

    await bot.send_photo(ADMIN_ID, photo, caption=caption)

@router.message(lambda message: message.document is not None or message.video is not None)
async def handle_files(message: types.Message):
    caption = f"üìÇ –ù–æ–≤—ã–π —Ñ–∞–π–ª!\nüë§ –ò–º—è: {message.from_user.full_name}\nüÜî ID: {message.from_user.id}"
    if message.from_user.username:
        caption += f"\nüîó Username: @{message.from_user.username}"
    if message.caption:
        caption += f"\n‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {message.caption}"

    if message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, caption=caption)
    elif message.video:
        await bot.send_video(ADMIN_ID, message.video.file_id, caption=caption)

dp.include_router(router)

async def on_start():
    print("‚úÖ Bot ishga tushdi!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(on_start())
